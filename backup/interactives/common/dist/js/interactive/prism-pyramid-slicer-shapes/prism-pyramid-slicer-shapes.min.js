!function(){"use strict";MathInteractives.Common.Interactivities.ShapeSlicer.Models.Pyramid||(MathInteractives.Common.Interactivities.ShapeSlicer.Models.Pyramid=MathInteractives.Common.Player.Models.BaseInteractive.extend({defaults:function(){return{radius:110*Math.pow(2,.5),height:220,radiusSegments:4,heightSegments:4,numberOfClickableSpheres:4,numberOfDummyLines:1e3,pointsArr:[],pointChecker:!1,cameraQuaternion:null,cameraPos:null,cameraUp:null,lastHoveredPoint:null,isResetButtonEnable:!1}},initialize:function(){null===this.get("cameraQuaternion")&&this.setCameraInitialValues()},setCameraInitialValues:function(){var a=MathInteractives.Common.Interactivities.ShapeSlicer.Models.Pyramid;this.set("cameraQuaternion",a.CAMERA_QUATERNION),this.set("cameraPos",a.CAMERA_POSITION),this.set("cameraUp",a.CAMERA_UP)}},{CAMERA_QUATERNION:{w:.9926912650848908,x:-.03338251333833725,y:-.11308802314220948,z:-.0257052067724823},CAMERA_POSITION:{x:-77.98237144441882,y:25.231836518262995,z:340.2676948665866},CAMERA_UP:{x:.058584993395634805,y:.9964497002541587,z:-.06046315747812758}}))}(),function(){"use strict";MathInteractives.Common.Interactivities.ShapeSlicer.Models.TriangularPrism||(MathInteractives.Common.Interactivities.ShapeSlicer.Models.TriangularPrism=MathInteractives.Common.Player.Models.BaseInteractive.extend({defaults:function(){return{side:220,otherSide:220*Math.pow(2,.5),height:220,radiusSegments:3,heightSegments:3,numberOfClickableSpheres:4,numberOfDummyLines:1e3,pointsArr:[],pointChecker:!1,cameraQuaternion:null,cameraPos:null,cameraUp:null,lastHoveredPoint:null,isResetButtonEnable:!1}},initialize:function(){null===this.get("cameraQuaternion")&&this.setCameraInitialValues()},setCameraInitialValues:function(){var a=MathInteractives.Common.Interactivities.ShapeSlicer.Models.TriangularPrism;this.set("cameraQuaternion",a.CAMERA_QUATERNION),this.set("cameraPos",a.CAMERA_POSITION),this.set("cameraUp",a.CAMERA_UP)}},{CAMERA_QUATERNION:{w:.9532886817966322,x:-.3009215890693126,y:-.024878622598870963,z:-.008241944527372633},CAMERA_POSITION:{x:-14.865431011183707,y:200.94913248808803,z:286.1790787481164},CAMERA_UP:{x:.030686933431395665,y:.8187565430793766,z:-.5733201856565052}}))}(),function(){"use strict";if(!MathInteractives.Common.Interactivities.ShapeSlicer.Views.Pyramid){var a=MathInteractives.Common.Interactivities.ShapeSlicer.Models.ShapeSlicer.EVENT_MANAGER_MODEL,b=null;MathInteractives.Common.Interactivities.ShapeSlicer.Views.Pyramid=MathInteractives.Common.Player.Views.Base.extend({scene:null,frontScene:null,camera:null,mouseVector:null,projector:null,ray:null,controls:null,parent:null,crossSection:null,outlineMesh:null,name:null,pyramid:null,pyramidSphereGroup:null,selectedSphereGroup:null,pyramidLines:null,eventManager:null,initialize:function(a){this.parent=a.parent,this.name=a.name,this.eventManager=a.eventManager,b=MathInteractives.Common.Interactivities.ShapeSlicer.Views.Pyramid,this.parent.initializeThreeJS(this),this.render(),this.attachEventListeners()},render:function(){this._createPyramid()},attachEventListeners:function(){var b=this;this.model.on("change:pointsArr",$.proxy(b._createCrossSectionForPyramid,b)),this.eventManager.on(a.CREATE_CROSSSECTION,$.proxy(b._createCrossSectionForPyramid),b)},_createPyramid:function(){this.pyramid=this._generatePyramid(),this.scene.add(this.pyramid),this._addLineToPyramid(),this._addDummyPyramidLines()},_generatePyramid:function(){var a,b,c=this.model.get("radius"),d=this.model.get("height"),e=this.parent.getMaterialDetails(),f=this.model.get("radiusSegments"),g=this.model.get("heightSegments");return a=new THREE.MeshBasicMaterial({color:e.COLOR,wireframe:!1,transparent:!0,opacity:e.OPACITY,depthWrite:!1}),b=new THREE.Mesh(new THREE.CylinderGeometry(0,c,d,f,g,!1),a),b.position.y+=d/4,b},_addLineToPyramid:function(){var a,c,d,e,f,g,h,i,j,k,l=this.model.get("numberOfClickableSpheres"),m=this.pyramid,n=m.geometry,o=n.vertices,p=this.model.get("height"),q=Math.sqrt(2),r=this.model.get("radius")*q,s=b.INDEX_VALUE,t=new THREE.Vector3,u=new THREE.Vector3,v=m.position,o=[{x:v.x,y:v.y+p/2,z:v.z},{x:v.x-r/q,y:v.y-p/2,z:v.z},{x:v.x,y:v.y-p/2,z:v.z-r/q},{x:v.x+r/q,y:v.y-p/2,z:v.z},{x:v.x,y:v.y-p/2,z:v.z+r/q}],w=o.length;this.pyramidSphereGroup=new THREE.Object3D,this.pyramidLinesGroup=new THREE.Object3D,this.selectedSphereGroup=new THREE.Object3D,e=o[0],a=this.parent.generateClickableSphere(),a.position.set(e.x,e.y,e.z),a.name="sphere-0-position-0",this.pyramidSphereGroup.add(a);for(var x=1;w>x;x++)c=o[x],this.pyramidLinesGroup.add(this.parent.drawLines(e,c)),a=this.parent.generateClickableSphere(),a.position.set(c.x,c.y,c.z),a.name="sphere-0-position-"+x,this.pyramidSphereGroup.add(a),d=o[(x+1)%w],x===w-1&&(d=o[(x+2)%w]),this.pyramidLinesGroup.add(this.parent.drawLines(c,d));g=this.pyramidLinesGroup.children,h=g.length;for(var x=0;h>x;x++){i=g[x].geometry.vertices,j=i[0],k=i[1],t=t.subVectors(j,k),t.divideScalar(l),u=j.clone();for(var y=1;l>y;y++)u=u.subVectors(u,t),f={x:u.x,y:u.y,z:u.z},a=this.parent.generateClickableSphere(),a.position.set(f.x,f.y,f.z),5!==x||7!==x?a.name="sphere-"+(y+s)+"-position-"+(x+1):a.name="sphere-"+(3%y+s)+"-position-"+(x+1),this.pyramidSphereGroup.add(a)}this.pyramidSphereGroup.children=this.parent.reOrderSpheres(this.pyramidSphereGroup,b.ORDERED_SPHERES),this.scene.add(this.pyramidSphereGroup),this.scene.add(this.pyramidLinesGroup),this.frontScene.add(this.selectedSphereGroup)},_addDummyPyramidLines:function(){for(var a,b,c,d,e,f,g,h=this.model.get("numberOfDummyLines"),i=this.pyramidSphereGroup,j=i.getObjectByName("sphere-0-position-0"),k=j.position,l=[],m={x:k.x,y:k.y,z:k.z},n=new THREE.Vector3,o=new THREE.Vector3,p=1;5>p;p++)l.push(i.getObjectByName("sphere-0-position-"+p));d=l.length,this.pyramidLines=[];for(var p=0;d>p;p++){f=l[p].position,g=l[(p+1)%d].position,n=n.subVectors(f,g),n.divideScalar(h),o=f.clone();for(var q=0;h>q;q++)0!==q&&(o=o.subVectors(o,n)),e={x:o.x,y:o.y,z:o.z},b=new THREE.Vector3(m.x,m.y,m.z),c=new THREE.Vector3(e.x,e.y,e.z),a=new THREE.Line3(b,c),this.pyramidLines.push(a)}},_createCrossSectionForPyramid:function(){var b,c,d,e=this.model.get("pointsArr"),f=this.parent.model.get("maxPoints"),g=this.parent.getCrosssectionDetails(),h=new THREE.MeshBasicMaterial({color:g.COLOR,side:THREE.DoubleSide,transparent:!0,depthWrite:!1,opacity:g.OPACITY}),i=new THREE.LineBasicMaterial({color:g.COLOR}),j=null,k=null,l=this.pyramidSphereGroup,m=e.length;if(this.crossSection&&(this.scene.remove(this.crossSection),this.crossSection=null,this.frontScene.remove(this.outlineMesh),this.outlineMesh=null),m===f){b=l.getObjectByName(e[0]),c=l.getObjectByName(e[1]),d=l.getObjectByName(e[2]);var n=null,o=this._checkNonCollinearPoints(e);if(o.result===!0){j=new THREE.Geometry,n=new THREE.Plane,n.setFromCoplanarPoints(b.position,c.position,d.position),this.parent.filterPoints(this.pyramidLines,n,j),k=j.vertices.length;for(var p=0;k-2>p;p++)j.faces.push(new THREE.Face3(p+1,p+2,0));this.model.set("pointChecker",!0)}else{var q=o.points;0!==q.length?(j=new THREE.Geometry,b=l.getObjectByName("sphere-"+q[0]+"-position-"+q[1]),c=l.getObjectByName("sphere-"+q[2]+"-position-"+q[3]),d=l.getObjectByName("sphere-"+q[4]+"-position-"+q[5]),j.vertices.push(b.position),j.vertices.push(c.position),j.vertices.push(d.position),j.vertices.push(b.position),j.faces.push(new THREE.Face3(3,1,2)),this.model.set("pointChecker",!0)):(0===o.errorType?this.eventManager.trigger(a.POINTS_ON_SAME_EDGE):1===o.errorType&&this.eventManager.trigger(a.POINTS_ON_SAME_FACE),this.model.set("pointChecker",!1))}j&&(this.crossSection=new THREE.Mesh(j,h),this.outlineMesh=new THREE.Line(j,i),this.scene.add(this.crossSection),this.frontScene.add(this.outlineMesh))}else this.model.set("pointChecker",!1)},_checkNonCollinearPoints:function(a){var b,c,d,e,f=/\d+/g,g={result:!1,points:[],errorType:0},h=[],i=[];switch(b=a[0].match(f),h.push(parseInt(b[0])),i.push(parseInt(b[1])),b=a[1].match(f),h.push(parseInt(b[0])),i.push(parseInt(b[1])),b=a[2].match(f),h.push(parseInt(b[0])),i.push(parseInt(b[1])),d=this.parent.sortPoints(_.uniq(i)),e=d.length,c=this.parent.countInstances(0,h)){case 0:return 1===e?g:this._isSameFace(c,d,h,i)?(g.errorType=1,g):this._isTriangle(c,d,h,i,g)?g:(g.result=!0,g);case 1:case 2:return this._isSameLine(c,h,i)?g:this._isSameFace(c,d,h,i)?(g.errorType=1,g):this._isTriangle(c,d,h,i,g)?g:(g.result=!0,g);case 3:return this._isSameFace(c,d,h,i)?(g.errorType=1,g):(g.points=[0,i[0],0,i[1],0,i[2]],g)}},_isSameLine:function(a,c,d){var e,f,g,h=b.VERTEX_TO_LINE;switch(a){case 1:return e=c.indexOf(0),f=_.difference([0,1,2],[e]),d[f[0]]===d[f[1]]&&h[d[e]].indexOf(d[f[0]])>-1;case 2:return e=c.indexOf(0),f=c.lastIndexOf(0),g=_.difference([0,1,2],[e,f])[0],_.intersection(h[d[e]],h[d[f]])[0]===d[g]}},_isSameFace:function(a,c,d,e){var f,g,h,i,j,k,l,m,n,o=b.FACE_TO_LINE,p=b.VERTEX_TO_FACE,q=b.LINE_TO_FACE;switch(a){case 0:for(var r in o)if(_.isEqual(c,_.intersection(c,o[r])))return!0;return!1;case 1:return f=d.indexOf(0),i=e[f],l=p[i],g=_.difference([0,1,2],[f]),j=e[g[0]],k=e[g[1]],m=q[j],n=q[k],_.intersection(l,m,n).length>0;case 2:return f=d.indexOf(0),i=e[f],l=p[i],g=d.lastIndexOf(0),j=e[g],m=p[j],h=_.difference([0,1,2],[f,g])[0],k=e[h],n=q[k],_.intersection(l,m,n).length>0;case 3:return i=e[0],l=p[i],j=e[1],m=p[j],k=e[2],n=p[k],_.intersection(l,m,n).length>0}},_isTriangle:function(a,c,d,e,f){var g,h,i,j,k,l,m=[],n=b.VERTEX_TO_LINE,o=b.LINE_TO_VERTEX,p=e.indexOf(0);if(p>-1)g=_.difference([0,1,2],[p]),h=n[e[p]],i=0===d[g[0]]?n[e[g[0]]]:[e[g[0]]],j=0===d[g[1]]?n[e[g[1]]]:[e[g[1]]],k=_.intersection(h,i),m.push(0,0),k.length>0?(l=o[k[0]],m.push(0,l[1])):m.push(d[g[0]],e[g[0]]),k=_.intersection(h,j),k.length>0?(l=o[k[0]],m.push(0,l[1])):m.push(d[g[1]],e[g[1]]);else{if(h=0===d[0]?n[e[0]]:[e[0]],i=0===d[1]?n[e[1]]:[e[1]],j=0===d[2]?n[e[2]]:[e[2]],g=_.intersection(h,i).length>0?[h,i,2]:_.intersection(h,j).length>0?[h,j,1]:_.intersection(i,j).length>0?[i,j,0]:[],!(g.length>0))return!1;if(k=_.intersection(g[0],g[1]),-1===n[0].indexOf(k[0]))return!1;l=o[k[0]],m.push(0,l[0]),m.push(0,l[1]),0===d[g[2]]||-1===n[0].indexOf(e[g[2]])?m.push(d[g[2]],e[g[2]]):(l=o[e[g[2]]],m.push(0,l[1]))}return f.points=m,!0},getSphereGroup:function(){return this.pyramidSphereGroup},getSelectedSphereGroup:function(){return this.selectedSphereGroup},getLines:function(){return this.pyramidLines},destroy:function(){this.scene=null,this.frontScene=null,this.camera=null,this.mouseVector=null,this.projector=null,this.ray=null,this.controls=null,this.parent=null,this.crossSection=null,this.outlineMesh=null,this.name=null,this.pyramid=null,this.pyramidSphereGroup=null,this.pyramidLines=null,this.eventManager=null}},{INDEX_VALUE:10,VERTEX_TO_LINE:{0:[1,3,5,7],1:[1,2,8],2:[2,3,4],3:[4,5,6],4:[6,7,9]},LINE_TO_VERTEX:{1:[0,1],2:[1,2],3:[0,2],4:[2,3],5:[0,3],6:[3,4],7:[0,4],8:[1,4]},VERTEX_TO_FACE:{0:[1,2,3,4],1:[1,2,5],2:[2,3,5],3:[3,4,5],4:[1,4,5]},FACE_TO_VERTEX:{1:[0,1,4],2:[0,1,2],3:[0,2,3],4:[0,3,4],5:[1,2,3,4]},FACE_TO_LINE:{1:[1,7,8],2:[1,2,3],3:[3,4,5],4:[5,6,7],5:[2,4,6,8]},LINE_TO_FACE:{1:[1,2],2:[2,5],3:[2,3],4:[3,5],5:[3,4],6:[4,5],7:[1,4],8:[1,5]},ORDERED_SPHERES:[[0,0],[11,1],[11,3],[11,5],[11,7],[12,1],[12,3],[12,5],[12,7],[13,1],[13,3],[13,5],[13,7],[0,1],[11,2],[12,2],[13,2],[0,2],[11,4],[12,4],[13,4],[0,3],[11,6],[12,6],[13,6],[0,4],[11,8],[12,8],[13,8]]})}}(),function(){"use strict";if(!MathInteractives.Common.Interactivities.ShapeSlicer.Views.TriangularPrism){var a=MathInteractives.Common.Interactivities.ShapeSlicer.Models.ShapeSlicer.EVENT_MANAGER_MODEL,b=null;MathInteractives.Common.Interactivities.ShapeSlicer.Views.TriangularPrism=MathInteractives.Common.Player.Views.Base.extend({scene:null,frontScene:null,camera:null,mouseVector:null,projector:null,ray:null,controls:null,parent:null,crossSection:null,outlineMesh:null,name:null,triangularPrism:null,triangularPrismSphereGroup:null,triangularPrismLinesGroup:null,selectedSphereGroup:null,triangularLines:null,eventManager:null,initialize:function(a){this.parent=a.parent,this.name=a.name,this.eventManager=a.eventManager,b=MathInteractives.Common.Interactivities.ShapeSlicer.Views.TriangularPrism,this.parent.initializeThreeJS(this),this.render(),this.attachEventListeners()},render:function(){this._createPrism()},attachEventListeners:function(){var b=this;this.model.on("change:pointsArr",$.proxy(b._createCrossSectionForPrism,b)),this.eventManager.on(a.CREATE_CROSSSECTION,$.proxy(b._createCrossSectionForPrism),b)},_createPrism:function(){this.triangularPrism=this._generatePrism(),this.scene.add(this.triangularPrism),this._addLinesToPrism(),this._addDummyPrismLines()},_generatePrismGeometry:function(){THREE.IsoscelesRightTriangularPrismGeometry=function(a,b,c){THREE.Geometry.call(this),this.equalSide=a,this.otherSide=b,this.height=c,this.radialSegments=3,this.heightSegments=3;var d,e,f=[],g=[],h=c/2;for(e=0;e<=this.heightSegments;e++){var i=[],j=[],k=this.otherSide/6,l=this.otherSide/2,m=e/this.heightSegments,n=0,o=new THREE.Vector3;o.x=0,o.y=-m*c+h,o.z=2*k,this.vertices.push(o),i.push(this.vertices.length-1),j.push(new THREE.Vector2(n,1-m)),n=1/3;var o=new THREE.Vector3;o.x=l,o.y=-m*c+h,o.z=-k,this.vertices.push(o),i.push(this.vertices.length-1),j.push(new THREE.Vector2(n,1-m)),n=2/3;var o=new THREE.Vector3;o.x=-l,o.y=-m*c+h,o.z=-k,this.vertices.push(o),i.push(this.vertices.length-1),j.push(new THREE.Vector2(n,1-m)),n=1;var o=new THREE.Vector3;o.x=0,o.y=-m*c+h,o.z=2*k,this.vertices.push(o),i.push(this.vertices.length-1),j.push(new THREE.Vector2(n,1-m)),f.push(i),g.push(j)}var p,q,r=0;for(d=0;d<this.radialSegments;d++)for(p=this.vertices[f[0][d]].clone(),q=this.vertices[f[0][d+1]].clone(),p.setY(Math.sqrt(p.x*p.x+p.z*p.z)*r).normalize(),q.setY(Math.sqrt(q.x*q.x+q.z*q.z)*r).normalize(),e=0;e<this.heightSegments;e++){var s=f[e][d],t=f[e+1][d],u=f[e+1][d+1],v=f[e][d+1],w=p.clone(),x=p.clone(),y=q.clone(),z=q.clone(),A=g[e][d].clone(),B=g[e+1][d].clone(),C=g[e+1][d+1].clone(),D=g[e][d+1].clone();this.faces.push(new THREE.Face4(s,t,u,v,[w,x,y,z])),this.faceVertexUvs[0].push([A,B,C,D])}for(this.vertices.push(new THREE.Vector3(0,h,0)),d=0;d<this.radialSegments;d++){var s=f[0][d],t=f[0][d+1],u=this.vertices.length-1,w=new THREE.Vector3(0,1,0),x=new THREE.Vector3(0,1,0),y=new THREE.Vector3(0,1,0),A=g[0][d].clone(),B=g[0][d+1].clone(),C=new THREE.Vector2(B.u,0);this.faces.push(new THREE.Face3(s,t,u,[w,x,y])),this.faceVertexUvs[0].push([A,B,C])}for(this.vertices.push(new THREE.Vector3(0,-h,0)),d=0;d<this.radialSegments;d++){var s=f[e][d+1],t=f[e][d],u=this.vertices.length-1,w=new THREE.Vector3(0,-1,0),x=new THREE.Vector3(0,-1,0),y=new THREE.Vector3(0,-1,0),A=g[e][d+1].clone(),B=g[e][d].clone(),C=new THREE.Vector2(B.u,1);this.faces.push(new THREE.Face3(s,t,u,[w,x,y])),this.faceVertexUvs[0].push([A,B,C])}this.computeCentroids(),this.computeFaceNormals()},THREE.IsoscelesRightTriangularPrismGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.IsoscelesRightTriangularPrismGeometry.prototype.constructor=THREE.IsoscelesRightTriangularPrismGeometry},_generatePrism:function(){var a,b,c=this.model.get("height"),d=this.model.get("side"),e=this.model.get("otherSide"),f=this.parent.getMaterialDetails();this.model.get("radiusSegments"),this.model.get("heightSegments");return a=new THREE.MeshBasicMaterial({color:f.COLOR,wireframe:!1,transparent:!0,opacity:f.OPACITY,depthWrite:!1}),this._generatePrismGeometry(),b=new THREE.Mesh(new THREE.IsoscelesRightTriangularPrismGeometry(d,e,c),a)},_addLinesToPrism:function(){var a,c,d,e,f,g,h=this.model.get("numberOfClickableSpheres"),i=this.triangularPrism,j=i.geometry,k=j.vertices,l=this.model.get("height"),m=(this.model.get("side"),this.model.get("otherSide")),n=b.INDEX_VALUE,o=new THREE.Vector3,p=new THREE.Vector3,q=i.position,r=m/6,s=m/2,k=[{x:0,y:q.y+l/2,z:q.z+2*r},{x:q.x+s,y:q.y+l/2,z:q.z-r},{x:q.x-s,y:q.y+l/2,z:q.z-r},{x:0,y:q.y-l/2,z:q.z+2*r},{x:q.x+s,y:q.y-l/2,z:q.z-r},{x:q.x-s,y:q.y-l/2,z:q.z-r}],t=k.length/2,u=null,v=null,w=null,x=null;this.triangularPrismSphereGroup=new THREE.Object3D,this.triangularPrismLinesGroup=new THREE.Object3D,this.selectedSphereGroup=new THREE.Object3D;for(var y=0;t>y;y++)x=k[y],u=k[(y+1)%t],this.triangularPrismLinesGroup.add(this.parent.drawLines(x,u)),a=this.parent.generateClickableSphere(),a.position.set(x.x,x.y,x.z),a.name="sphere-0-position-"+y,this.triangularPrismSphereGroup.add(a),v=k[y+3],this.triangularPrismLinesGroup.add(this.parent.drawLines(x,v)),a=this.parent.generateClickableSphere(),a.position.set(v.x,v.y,v.z),a.name="sphere-0-position-"+(y+3),this.triangularPrismSphereGroup.add(a),w=2!==y?k[y+4]:k[y+1],this.triangularPrismLinesGroup.add(this.parent.drawLines(v,w));c=this.triangularPrismLinesGroup.children,d=c.length;for(var y=0;d>y;y++){e=c[y].geometry.vertices,f=e[0],g=e[1],o=o.subVectors(f,g),o.divideScalar(h),p=f.clone();for(var z=1;h>z;z++)p=p.subVectors(p,o),x={x:p.x,y:p.y,z:p.z},a=this.parent.generateClickableSphere(),a.position.set(x.x,x.y,x.z),a.name="sphere-"+(z+n)+"-position-"+(y+1),this.triangularPrismSphereGroup.add(a)}this.triangularPrismSphereGroup.children=this.parent.reOrderSpheres(this.triangularPrismSphereGroup,b.ORDERED_SPHERES),this.scene.add(this.triangularPrismSphereGroup),this.scene.add(this.triangularPrismLinesGroup),this.frontScene.add(this.selectedSphereGroup)},_addDummyPrismLines:function(){var a,b,c,d,e,f,g=this.model.get("numberOfDummyLines"),h=this.triangularPrismSphereGroup,i=this.model.get("height"),j=new THREE.Vector3,k=new THREE.Vector3;this.triangularLines=[];for(var l=0;3>l;l++){e=h.getObjectByName("sphere-0-position-"+l).position,f=h.getObjectByName("sphere-0-position-"+(l+1)%3).position,j=j.subVectors(e,f),j.divideScalar(g),k=e.clone();for(var m=0;g>m;m++)0!==m&&(k=k.subVectors(k,j)),d={x:k.x,y:k.y,z:k.z},b=new THREE.Vector3(d.x,d.y,d.z),c=new THREE.Vector3(d.x,d.y-i,d.z),a=new THREE.Line3(b,c),this.triangularLines.push(a)}},_createCrossSectionForPrism:function(){var b,c,d,e,f=this.model.get("pointsArr"),g=this.parent.model.get("maxPoints"),h=this.parent.getCrosssectionDetails(),i=new THREE.MeshBasicMaterial({color:h.COLOR,side:THREE.DoubleSide,transparent:!0,depthWrite:!1,opacity:h.OPACITY}),j=new THREE.LineBasicMaterial({color:h.COLOR}),k=null,l=this.triangularPrismSphereGroup,m=f.length;if(this.crossSection&&(this.scene.remove(this.crossSection),this.crossSection=null,this.frontScene.remove(this.outlineMesh),this.outlineMesh=null),m===g){b=l.getObjectByName(f[0]),c=l.getObjectByName(f[1]),d=l.getObjectByName(f[2]);var n=null,o=this._checkNonCollinearPoints(f);if(o.result===!0){k=new THREE.Geometry,n=new THREE.Plane,n.setFromCoplanarPoints(b.position,c.position,d.position),this.parent.filterPoints(this.triangularLines,n,k);for(var p=k.vertices.length,q=0;p-2>q;q++)k.faces.push(new THREE.Face3(q+1,q+2,0));this.model.set("pointChecker",!0)}else{var r=o.points;0!==r.length?(k=new THREE.Geometry,b=l.getObjectByName("sphere-"+r[0]+"-position-"+r[1]),c=l.getObjectByName("sphere-"+r[2]+"-position-"+r[3]),d=l.getObjectByName("sphere-"+r[4]+"-position-"+r[5]),e=l.getObjectByName("sphere-"+r[6]+"-position-"+r[7]),k.vertices.push(b.position),k.vertices.push(c.position),k.vertices.push(d.position),k.vertices.push(e.position),k.vertices.push(b.position),k.faces.push(new THREE.Face3(0,1,2)),k.faces.push(new THREE.Face3(0,2,3)),this.model.set("pointChecker",!0)):(0===o.errorType?this.eventManager.trigger(a.POINTS_ON_SAME_EDGE):1===o.errorType&&this.eventManager.trigger(a.POINTS_ON_SAME_FACE),this.model.set("pointChecker",!1))}k&&(this.crossSection=new THREE.Mesh(k,i),this.outlineMesh=new THREE.Line(k,j),this.scene.add(this.crossSection),this.frontScene.add(this.outlineMesh))}else this.model.set("pointChecker",!1)},_checkNonCollinearPoints:function(a){var b,c,d,e,f=/\d+/g,g={result:!1,points:[],errorType:0},h=[],i=[];switch(b=a[0].match(f),h.push(parseInt(b[0])),i.push(parseInt(b[1])),b=a[1].match(f),h.push(parseInt(b[0])),i.push(parseInt(b[1])),b=a[2].match(f),h.push(parseInt(b[0])),i.push(parseInt(b[1])),d=this.parent.sortPoints(_.uniq(i)),e=d.length,c=this.parent.countInstances(0,h)){case 0:return 1===e?g:this._isSameFace(c,d,h,i)?(g.errorType=1,g):this._isRectangle(c,d,h,i,g)?g:(g.result=!0,g);case 1:case 2:return this._isSameLine(c,h,i)?g:this._isSameFace(c,d,h,i)?(g.errorType=1,g):this._isRectangle(c,d,h,i,g)?g:(g.result=!0,g);case 3:return this._isSameFace(c,d,h,i)?(g.errorType=1,g):(g.result=!0,g)}},_isSameLine:function(a,c,d){var e,f,g,h=b.VERTEX_TO_LINE;switch(a){case 1:return e=c.indexOf(0),f=_.difference([0,1,2],[e]),d[f[0]]===d[f[1]]&&h[d[e]].indexOf(d[f[0]])>-1;case 2:return e=c.indexOf(0),f=c.lastIndexOf(0),g=_.difference([0,1,2],[e,f])[0],_.intersection(h[d[e]],h[d[f]])[0]===d[g]}},_isSameFace:function(a,c,d,e){var f,g,h,i,j,k,l,m,n,o=b.FACE_TO_LINE,p=b.VERTEX_TO_FACE,q=b.LINE_TO_FACE;switch(a){case 0:for(var r in o)if(_.isEqual(c,_.intersection(c,o[r])))return!0;return!1;case 1:return f=d.indexOf(0),i=e[f],l=p[i],g=_.difference([0,1,2],[f]),j=e[g[0]],k=e[g[1]],m=q[j],n=q[k],_.intersection(l,m,n).length>0;case 2:return f=d.indexOf(0),i=e[f],l=p[i],g=d.lastIndexOf(0),j=e[g],m=p[j],h=_.difference([0,1,2],[f,g])[0],k=e[h],n=q[k],_.intersection(l,m,n).length>0;case 3:return l=p[e[0]],m=p[e[1]],n=p[e[2]],_.intersection(l,m,n).length>0}},_isRectangle:function(a,c,d,e,f){var g,h,i,j,k,l,m=[],n=b.VERTEX_TO_LINE,o=b.LINE_TO_VERTEX,p=b.FACE_TO_LINE,q=(b.LINE_TO_FACE,b.OPPOSITE_LINES),r=[],s=!1;return h=0===d[0]?n[e[0]]:[e[0]],i=0===d[1]?n[e[1]]:[e[1]],j=0===d[2]?n[e[2]]:[e[2]],g=_.intersection(h,i).length>0?[h,i,2]:_.intersection(h,j).length>0?[h,j,1]:_.intersection(i,j).length>0?[i,j,0]:[],g.length>0?(k=_.intersection(g[0],g[1]),-1===p[4].indexOf(k[0])&&-1===p[5].indexOf(k[0])?(l=o[k[0]],m.push(0,l[0]),m.push(0,l[1]),-1!==p[4].indexOf(e[g[2]])?(m.push(d[g[2]],q[e[g[2]]]),m.push(d[g[2]],e[g[2]])):-1!==p[5].indexOf(e[g[2]])&&(m.push(d[g[2]],e[g[2]]),m.push(d[g[2]],q[e[g[2]]])),f.points=m,!0):!1):(0!==d[0]&&d[0]===d[1]&&q[e[0]]===e[1]&&(r.push(0,1,2),s=!0),s||0===d[1]||d[1]!==d[2]||q[e[1]]!==e[2]||(r.push(1,2,0),s=!0),s||0===d[2]||d[0]!==d[2]||q[e[0]]!==e[2]||(r.push(2,0,1),s=!0),s===!0?this._getFourthPoint(r,d,e,f):!1)},_getFourthPoint:function(a,c,d,e){var f=b.VERTICAL_LINES,g=b.OPPOSITE_LINES,h=b.LINE_TO_VERTEX,i=b.VERTEX_TO_FACE,j=b.LINE_TO_FACE,k=[],l=!1,m=[];return m.push(c[a[0]],d[a[0]]),m.push(c[a[1]],d[a[1]]),0===c[a[2]]?(k.push(d[a[2]]),k.push((d[a[2]]+3)%6),l=!0):f.indexOf(d[a[2]])>-1&&(k=h[d[a[2]]],l=!0),l?_.intersection(i[k[0]],j[d[a[1]]]).length>0?(m.push(0,k[0]),m.push(0,k[1])):(m.push(0,k[1]),m.push(0,k[0])):_.intersection(j[d[a[2]]],j[d[a[1]]]).length>0?(m.push(c[a[2]],d[a[2]]),m.push(c[a[2]],g[d[a[2]]])):(m.push(c[a[2]],g[d[a[2]]]),m.push(c[a[2]],d[a[2]])),e.points=m,!0},getSphereGroup:function(){return this.triangularPrismSphereGroup},getSelectedSphereGroup:function(){return this.selectedSphereGroup},getLines:function(){return this.triangularLines},destroy:function(){this.scene=null,this.frontScene=null,this.camera=null,this.mouseVector=null,this.projector=null,this.ray=null,this.controls=null,this.parent=null,this.crossSection=null,this.outlineMesh=null,this.name=null,this.triangularPrism=null,this.triangularPrismSphereGroup=null,this.triangularPrismLinesGroup=null,this.triangularLines=null,this.eventManager=null}},{INDEX_VALUE:10,VERTEX_TO_LINE:{0:[1,2,7],1:[1,4,5],2:[4,7,8],3:[2,3,9],4:[3,5,6],5:[6,8,9]},LINE_TO_VERTEX:{1:[0,1],2:[0,3],3:[3,4],4:[1,2],5:[1,4],6:[4,5],7:[0,2],8:[2,5],9:[3,5]},VERTEX_TO_FACE:{0:[1,3,4],1:[2,3,4],2:[1,2,4],3:[1,3,5],4:[2,3,5],5:[1,2,5]},FACE_TO_VERTEX:{1:[0,2,3,5],2:[1,2,4,5],3:[0,1,3,4],4:[0,1,2],5:[3,4,5]},FACE_TO_LINE:{1:[2,7,8,9],2:[4,5,6,8],3:[1,2,3,5],4:[1,4,7],5:[3,6,9]},LINE_TO_FACE:{1:[3,4],2:[1,3],3:[3,5],4:[2,4],5:[2,3],6:[2,5],7:[1,4],8:[1,2],9:[1,5]},OPPOSITE_LINES:{1:3,3:1,4:6,6:4,7:9,9:7},VERTICAL_LINES:[2,5,8],ORDERED_SPHERES:[[0,0],[13,7],[12,7],[11,7],[0,2],[13,4],[12,4],[11,4],[0,1],[13,1],[12,1],[11,1],[11,2],[11,8],[11,5],[12,2],[12,8],[12,5],[13,2],[13,8],[13,5],[0,3],[13,9],[12,9],[11,9],[0,5],[13,6],[12,6],[11,6],[0,4],[13,3],[12,3],[11,3]]})}}();