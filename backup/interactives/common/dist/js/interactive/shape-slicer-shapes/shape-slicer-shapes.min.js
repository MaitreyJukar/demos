!function(){"use strict";MathInteractives.Common.Interactivities.ShapeSlicer.Models.Cone||(MathInteractives.Common.Interactivities.ShapeSlicer.Models.Cone=MathInteractives.Common.Player.Models.BaseInteractive.extend({defaults:function(){return{pointsArr:[],pointChecker:!1,radius:130,height:220,segments:50,numberOfClickableSpheres:6,numberOfDummyLines:5e4,cameraQuaternion:null,cameraPos:null,cameraUp:null,lastHoveredPoint:null,isResetButtonEnable:!1}},initialize:function(){null===this.get("cameraQuaternion")&&this.setCameraInitialValues()},setCameraInitialValues:function(){var a=MathInteractives.Common.Interactivities.ShapeSlicer.Models.Cone;this.set("cameraQuaternion",a.CAMERA_QUATERNION),this.set("cameraPos",a.CAMERA_POSITION),this.set("cameraUp",a.CAMERA_UP)}},{CAMERA_QUATERNION:{w:1,x:0,y:0,z:0},CAMERA_POSITION:{x:0,y:0,z:350},CAMERA_UP:{x:0,y:1,z:0}}))}(),function(){"use strict";MathInteractives.Common.Interactivities.ShapeSlicer.Models.Sphere||(MathInteractives.Common.Interactivities.ShapeSlicer.Models.Sphere=MathInteractives.Common.Player.Models.BaseInteractive.extend({defaults:function(){return{pointsArr:[],pointChecker:!1,radius:175,segments:50,numberOfVerticalCircles:3,numberOfHorizontalCircles:5,numberOfClickableSpheres:6,cameraQuaternion:null,cameraPos:null,cameraUp:null,lastHoveredPoint:null,isResetButtonEnable:!1}},initialize:function(){null===this.get("cameraQuaternion")&&this.setCameraInitialValues()},setCameraInitialValues:function(){var a=MathInteractives.Common.Interactivities.ShapeSlicer.Models.Sphere;this.set("cameraQuaternion",a.CAMERA_QUATERNION),this.set("cameraPos",a.CAMERA_POSITION),this.set("cameraUp",a.CAMERA_UP)}},{CAMERA_QUATERNION:{w:.965842614143013,x:7484599268762112e-20,y:-.25912934085857875,z:-.0001598908903332809},CAMERA_POSITION:{x:-175.1947224582841,y:-.02159991882916927,z:302.9963840645764},CAMERA_UP:{x:.0002700692805593036,y:.9999999376659625,z:.0002274437378109711}}))}(),function(){"use strict";MathInteractives.Common.Interactivities.ShapeSlicer.Models.Cylinder||(MathInteractives.Common.Interactivities.ShapeSlicer.Models.Cylinder=MathInteractives.Common.Player.Models.BaseInteractive.extend({defaults:function(){return{pointsArr:[],pointChecker:!1,radius:150,height:220,segments:50,numberOfClickableSpheres:6,numberOfDummyLines:5e4,cameraQuaternion:null,cameraPos:null,cameraUp:null,lastHoveredPoint:null,isResetButtonEnable:!1}},initialize:function(){null===this.get("cameraQuaternion")&&this.setCameraInitialValues()},setCameraInitialValues:function(){var a=MathInteractives.Common.Interactivities.ShapeSlicer.Models.Cylinder;this.set("cameraQuaternion",a.CAMERA_QUATERNION),this.set("cameraPos",a.CAMERA_POSITION),this.set("cameraUp",a.CAMERA_UP)}},{CAMERA_QUATERNION:{w:-.4929501807218744,x:.0013824715120474766,y:.8700525621589653,z:.0025995492240981693},CAMERA_POSITION:{x:-300.2222749652828,y:2.0602637651487825,z:-179.89536105160855},CAMERA_UP:{x:.004968542127117028,y:.999982662233651,z:.003160509647327568}}))}(),function(){"use strict";MathInteractives.Common.Interactivities.ShapeSlicer.Models.Prism||(MathInteractives.Common.Interactivities.ShapeSlicer.Models.Prism=MathInteractives.Common.Player.Models.BaseInteractive.extend({defaults:function(){return{pointsArr:[],pointChecker:!1,radius:150,height:220,radiusSegments:6,heightSegments:4,numberOfClickableSpheres:6,numberOfDummyLines:5e3,numberOfPolygonSides:6,offsetForCrossSectionY:4,cameraQuaternion:null,cameraPos:null,cameraUp:null,lastHoveredPoint:null,isResetButtonEnable:!1}},initialize:function(){null===this.get("cameraQuaternion")&&this.setCameraInitialValues()},setCameraInitialValues:function(){var a=MathInteractives.Common.Interactivities.ShapeSlicer.Models.Prism;this.set("cameraQuaternion",a.CAMERA_QUATERNION),this.set("cameraPos",a.CAMERA_POSITION),this.set("cameraUp",a.CAMERA_UP)}},{CAMERA_QUATERNION:{w:-.250162329032432,x:.001070076560693548,y:.9682031672439314,z:.0005455695670457578},CAMERA_POSITION:{x:-169.5451644921678,y:.5571405228582591,z:-306.1929567964649},CAMERA_UP:{x:.002345064960379164,y:.9999971145799406,z:.0005210586569029675}}))}(),function(){"use strict";MathInteractives.Common.Interactivities.ShapeSlicer.Models.Tetrahedron||(MathInteractives.Common.Interactivities.ShapeSlicer.Models.Tetrahedron=MathInteractives.Common.Player.Models.BaseInteractive.extend({defaults:function(){return{pointsArr:[],pointChecker:!1,sideLength:195,numberOfClickableSpheres:4,numberOfDummyLines:1e3,cameraQuaternion:null,cameraPos:null,cameraUp:null,lastHoveredPoint:null,isResetButtonEnable:!1}},initialize:function(){null===this.get("cameraQuaternion")&&this.setCameraInitialValues()},setCameraInitialValues:function(){var a=MathInteractives.Common.Interactivities.ShapeSlicer.Models.Tetrahedron;this.set("cameraQuaternion",a.CAMERA_QUATERNION),this.set("cameraPos",a.CAMERA_POSITION),this.set("cameraUp",a.CAMERA_UP)}},{CAMERA_QUATERNION:{w:.3594646890399105,x:.11848498188999244,y:.2788230208698257,z:.8826121296983569},CAMERA_POSITION:{x:143.36231920298093,y:142.45099585194498,z:285.75331881455594},CAMERA_UP:{x:-.5684630990034325,y:-.586085714277047,z:.5773675091237671}}))}(),function(){"use strict";if(!MathInteractives.Common.Interactivities.ShapeSlicer.Views.Cone){var a=MathInteractives.Common.Interactivities.ShapeSlicer.Models.ShapeSlicer.EVENT_MANAGER_MODEL,b=null;MathInteractives.Common.Interactivities.ShapeSlicer.Views.Cone=MathInteractives.Common.Player.Views.Base.extend({scene:null,frontScene:null,camera:null,mouseVector:null,projector:null,ray:null,controls:null,cone:null,coneSphereGroup:null,coneEllipseGroup:null,parent:null,selectedSphereGroup:null,ellipseLines:null,crossSection:null,outlineMesh:null,name:null,eventManager:null,initialize:function(a){this.parent=a.parent,this.name=a.name,this.eventManager=a.eventManager,b=MathInteractives.Common.Interactivities.ShapeSlicer.Views.Cone,this.parent.initializeThreeJS(this),this.render(),this.attachEventListeners()},render:function(){this._createCone()},attachEventListeners:function(){var b=this;this.model.on("change:pointsArr",$.proxy(b._createCrossSectionForCone,b)),this.eventManager.on(a.CREATE_CROSSSECTION,$.proxy(b._createCrossSectionForCone),b)},_createCone:function(){this.cone=this._generateCone(),this.scene.add(this.cone),this._addEllipseToCone(),this._addDummyConeLines()},_generateCone:function(){var a,b,c=0,d=this.model.get("radius"),e=this.model.get("height"),f=this.parent.getMaterialDetails(),g=this.model.get("segments");return a=new THREE.MeshBasicMaterial({color:f.COLOR,wireframe:!1,transparent:!0,opacity:f.OPACITY,depthWrite:!1}),b=new THREE.Mesh(new THREE.CylinderGeometry(c,d,e,g,g,!1),a),b.position.y+=e/4,b},_addDummyConeLines:function(){var a,b,c,d,e=this.model.get("numberOfDummyLines"),f=this.cone.position,g={x:f.x,y:f.y+this.cone.geometry.height/2,z:f.z},h=e/2,i=new THREE.Vector3(g.x,g.y,g.z),j=this.coneEllipseGroup.children[3],k=j.position,l=j.geometry.boundingSphere.radius,m=k.y,n=k.z,o=360/e;this.ellipseLines=[];for(var p=0;h>=p;p+=10)d=this.parent.angleToRadians(p*o),c={x:Math.cos(d)*l,y:m,z:n-Math.sin(d)*l},b=new THREE.Vector3(c.x,c.y,c.z),a=new THREE.Line3(i,b),this.ellipseLines.push(a);for(var p=0;h>p;p+=10)d=this.parent.angleToRadians((h-p)*o),c={x:Math.cos(d)*l,y:m,z:n+Math.sin(d)*l},b=new THREE.Vector3(c.x,c.y,c.z),a=new THREE.Line3(i,b),this.ellipseLines.push(a)},_createCrossSectionForCone:function(){var b,c,d,e=this.model.get("pointsArr"),f=this.parent.model.get("maxPoints"),g=this.parent.getCrosssectionDetails(),h=new THREE.MeshBasicMaterial({color:g.COLOR,side:THREE.DoubleSide,transparent:!0,depthWrite:!1,opacity:g.OPACITY}),i=new THREE.LineBasicMaterial({color:g.COLOR}),j=null,k=this.coneSphereGroup,l=e.length;if(this.crossSection&&(this.scene.remove(this.crossSection),this.crossSection=null,this.frontScene.remove(this.outlineMesh),this.outlineMesh=null),l===f){b=k.getObjectByName(e[0]),c=k.getObjectByName(e[1]),d=k.getObjectByName(e[2]);var m=null,n=this._checkNonCollinearPoints(e);if(n.result===!0){m=new THREE.Plane,j=new THREE.Geometry,m.setFromCoplanarPoints(b.position,c.position,d.position),this.parent.filterPoints(this.ellipseLines,m,j);for(var o=j.vertices.length,p=0;o-2>p;p++)j.faces.push(new THREE.Face3(p+1,p+2,0));this.model.set("pointChecker",!0)}else{var q=n.points;0!==q.length?(j=new THREE.Geometry,b=k.getObjectByName("sphere-6-position-0"),c=k.getObjectByName("sphere-"+q[0]+"-position-100"),d=k.getObjectByName("sphere-"+q[1]+"-position-100"),j.vertices.push(b.position),j.vertices.push(c.position),j.vertices.push(d.position),j.vertices.push(b.position),j.faces.push(new THREE.Face3(3,1,2)),this.model.set("pointChecker",!0)):(0===n.errorType?this.eventManager.trigger(a.POINTS_ON_SAME_EDGE):1===n.errorType&&this.eventManager.trigger(a.POINTS_ON_SAME_FACE),this.model.set("pointChecker",!1))}j&&(this.crossSection=new THREE.Mesh(j,h),this.outlineMesh=new THREE.Line(j,i),this.scene.add(this.crossSection),this.frontScene.add(this.outlineMesh))}else this.model.set("pointChecker",!1)},_checkNonCollinearPoints:function(a){var b,c,d,e,f,g,h,i=/\d+/g,j=(a.length,{result:!1,points:[],errorType:0}),k=[],l=[];if(b=a[0].match(i),k.push(b[0]),l.push(b[1]),b=a[1].match(i),k.push(b[0]),l.push(b[1]),b=a[2].match(i),k.push(b[0]),l.push(b[1]),g=l.indexOf("0"),h=l.indexOf("100"),c=_.uniq(k),d=c.length,1===d)return j;if(-1===g){if(3===d)return-1!==h&&(e=_.uniq(l),f=e.length,1===f)?(j.errorType=1,j):(j.result=!0,j);j.points=[c[0],c[1]]}else 3===d&&(j.points=[k[(g+1)%3],k[(g+2)%3]]);return j},_addEllipseToCone:function(){var a,c,d,e,f=b.ELLIPSE_POSITION,g=f.length,h=this.cone,i=h.position,j=h.geometry.radiusBottom,k=[],l=h.geometry.height,m=!1;this.coneSphereGroup=new THREE.Object3D,this.coneEllipseGroup=new THREE.Object3D,this.selectedSphereGroup=new THREE.Object3D,c=this.parent.generateClickableSphere(),c.position.set(i.x,i.y+l/2,i.z),c.name="sphere-6-position-0",this.coneSphereGroup.add(c);for(var n=0;g>n;n++)d=(50-f[n])*l/100,e=f[n]*l/100,a=this._getRadiusForCrossSectionInCone(j,l,e),k[n]=this.parent.drawCurve(a,a),k[n].rotation.x=this.parent.angleToRadians(90),k[n].position.set(i.x,i.y+d,i.z),this.coneEllipseGroup.add(k[n]),n===g-1&&(m=!0),this._addSpheresToCone(k[n],m,f[n]);this.scene.add(this.coneEllipseGroup),this.scene.add(this.coneSphereGroup),this.frontScene.add(this.selectedSphereGroup)},_addSpheresToCone:function(a,b,c){for(var d,e,f,g,h=[],i=a.geometry.boundingSphere.radius,j=this.model.get("numberOfClickableSpheres"),k=Math.sqrt(3)/2,l=a.position,m=[{x:l.x-i/2,y:l.y,z:l.z+k*i},{x:l.x-i,y:l.y,z:l.z},{x:l.x-i/2,y:l.y,z:l.z-k*i},{x:l.x+i/2,y:l.y,z:l.z-k*i},{x:l.x+i,y:l.y,z:l.z},{x:l.x+i/2,y:l.y,z:l.z+k*i}],n=0;j>n;n++)h[n]=this.parent.generateClickableSphere(),h[n].position.set(m[n].x,m[n].y,m[n].z),h[n].name="sphere-"+n+"-position-"+c,this.coneSphereGroup.add(h[n]),b===!0&&(f=this.cone.position,e={x:f.x,y:f.y+this.cone.geometry.height/2,z:f.z},d={x:m[n].x,y:m[n].y,z:m[n].z},g=this.parent.drawLines(e,d),this.scene.add(g))},_getRadiusForCrossSectionInCone:function(a,b,c){var d=a/b,e=d*c;return e},getSphereGroup:function(){return this.coneSphereGroup},getSelectedSphereGroup:function(){return this.selectedSphereGroup},getLines:function(){return this.ellipseLines},destroy:function(){this.scene=null,this.frontScene=null,this.camera=null,this.mouseVector=null,this.projector=null,this.ray=null,this.controls=null,this.parent=null,this.crossSection=null,this.outlineMesh=null,this.name=null,this.cone=null,this.coneSphereGroup=null,this.coneEllipseGroup=null,this.ellipseLines=null,this.eventManager=null}},{ELLIPSE_POSITION:[25,50,75,100]})}}(),function(){"use strict";if(!MathInteractives.Common.Interactivities.ShapeSlicer.Views.Sphere){var a=MathInteractives.Common.Interactivities.ShapeSlicer.Models.ShapeSlicer.EVENT_MANAGER_MODEL,b=null;MathInteractives.Common.Interactivities.ShapeSlicer.Views.Sphere=MathInteractives.Common.Player.Views.Base.extend({scene:null,frontScene:null,camera:null,mouseVector:null,projector:null,ray:null,controls:null,sphere:null,sphereCircleGroup:null,sphereVerticalCircleGroup:null,sphereHorizontalCircleGroup:null,sphereSphereGroup:null,selectedSphereGroup:null,parent:null,crossSection:null,outlineMesh:null,name:null,eventManager:null,initialize:function(a){this.parent=a.parent,this.name=a.name,this.eventManager=a.eventManager,b=MathInteractives.Common.Interactivities.ShapeSlicer.Views.Sphere,this.parent.initializeThreeJS(this),this.render(),this.attachEventListeners()},render:function(){this._createSphere()},_createSphere:function(){this.sphere=this._generateSphere(),this.scene.add(this.sphere),this._addVerticalCirclesToSphere(),this._addHorizontalCirclesToSphere()},attachEventListeners:function(){var b=this;this.model.on("change:pointsArr",$.proxy(b._createCrossSectionForSphere,b)),this.eventManager.on(a.CREATE_CROSSSECTION,$.proxy(b._createCrossSectionForSphere),b)},_generateSphere:function(){var a,b,c,d=this.parent.getMaterialDetails(),e={color:d.COLOR,wireframe:!1,transparent:!0,opacity:d.OPACITY,depthWrite:!1},f=this.model.get("segments"),g=this.model.get("radius");return c=new THREE.SphereGeometry(g,f,f),a=new THREE.MeshBasicMaterial(e),b=new THREE.Mesh(c,a)},_addVerticalCirclesToSphere:function(){var a,b=this.model.get("radius"),c=this.model.get("segments"),d=this.parent.getOutlineDetails(),e=new THREE.LineBasicMaterial({color:d.COLOR}),f=new THREE.CircleGeometry(b,c),g=this.model.get("numberOfVerticalCircles"),h=180/g,i=new THREE.Line(f,e);f.vertices.shift(),this.sphereVerticalCircleGroup=new THREE.Object3D;for(var j=0;g>j;j++)a=i.clone(),a.rotateOnAxis(new THREE.Vector3(0,1,0),this.parent.angleToRadians(h*j)),this.sphereVerticalCircleGroup.add(a);this.scene.add(this.sphereVerticalCircleGroup)},_addHorizontalCirclesToSphere:function(){var a,c,d,e=b.CIRCLE_POSITION,f=this.sphere,g=f.position,h=this.model.get("radius"),i=[],j=this.model.get("numberOfHorizontalCircles");this.sphereHorizontalCircleGroup=new THREE.Object3D,this.sphereSphereGroup=new THREE.Object3D,this.selectedSphereGroup=new THREE.Object3D,c=this.parent.generateClickableSphere(),c.position.set(g.x,g.y+h,g.z),c.name="sphere-6-position-0",this.sphereSphereGroup.add(c);for(var k=0;j>k;k++)d=(50-e[k])*(2*h)/100,a=this._getRadiusForCrossSectionInSphere(h,d),i[k]=this.parent.drawCurve(a,a),i[k].rotation.x=this.parent.angleToRadians(90),i[k].position.set(g.x,g.y+d,g.z),this.sphereHorizontalCircleGroup.add(i[k]),this._addSpheresToSphere(i[k],e[k]);c=this.parent.generateClickableSphere(),c.position.set(g.x,g.y-h,g.z),c.name="sphere-6-position-100",this.sphereSphereGroup.add(c),this.scene.add(this.sphereHorizontalCircleGroup),this.scene.add(this.sphereSphereGroup),this.frontScene.add(this.selectedSphereGroup)},_getRadiusForCrossSectionInSphere:function(a,b){return Math.sqrt(Math.pow(a,2)-Math.pow(b,2))},_addSpheresToSphere:function(a,b){for(var c=[],d=a.geometry.boundingSphere.radius,e=Math.sqrt(3)/2,f=a.position,g=this.model.get("numberOfClickableSpheres"),h=[{x:f.x-d,y:f.y,z:f.z},{x:f.x-d/2,y:f.y,z:f.z-e*d},{x:f.x+d/2,y:f.y,z:f.z-e*d},{x:f.x+d,y:f.y,z:f.z},{x:f.x+d/2,y:f.y,z:f.z+e*d},{x:f.x-d/2,y:f.y,z:f.z+e*d}],i=0;g>i;i++)c[i]=this.parent.generateClickableSphere(),c[i].position.set(h[i].x,h[i].y,h[i].z),c[i].name="sphere-"+i+"-position-"+b,this.sphereSphereGroup.add(c[i])},_createCrossSectionForSphere:function(){var a,b,c,d,e=this.model.get("pointsArr"),f=this.parent.model.get("maxPoints"),g=this.parent.getCrosssectionDetails(),h=new THREE.MeshBasicMaterial({color:g.COLOR,side:THREE.DoubleSide,transparent:!0,depthWrite:!1,opacity:g.OPACITY}),i=new THREE.LineBasicMaterial({color:g.COLOR}),j=this.sphereSphereGroup,k=e.length;if(this.crossSection&&(this.scene.remove(this.crossSection),this.crossSection=null,this.frontScene.remove(this.outlineMesh),this.outlineMesh=null),k===f){b=j.getObjectByName(e[0]),c=j.getObjectByName(e[1]),d=j.getObjectByName(e[2]);var l,m,n,o,p,q,r,s=new THREE.Plane,t=b.position,u=c.position,v=d.position,w=t.clone().subVectors(t,u),x=t.clone().subVectors(t,v),y=u.clone().subVectors(u,v),z=this.model.get("segments"),A=2*w.clone().crossVectors(w,y).lengthSq();s.setFromCoplanarPoints(t,u,v),l=y.lengthSq()*w.dot(x)/A,m=x.lengthSq()*w.negate().dot(y)/A,n=w.lengthSq()*x.negate().dot(y.negate())/A,o=t.clone().multiplyScalar(l).add(u.clone().multiplyScalar(m).add(v.clone().multiplyScalar(n))),p=o.distanceTo(t),a=new THREE.CircleGeometry(p,z),a.faces.length=z-1,a.vertices.shift(),this.crossSection=new THREE.Mesh(a,h),this.outlineMesh=new THREE.Line(a,i),r=s.normal,q=new THREE.Vector3(this.crossSection.position.x+r.x,this.crossSection.position.y+r.y,this.crossSection.position.z+r.z),this.crossSection.lookAt(q),this.crossSection.position.set(o.x,o.y,o.z),this.model.set("pointChecker",!0),this.outlineMesh.lookAt(q),this.outlineMesh.position.set(o.x,o.y,o.z),this.scene.add(this.crossSection),this.frontScene.add(this.outlineMesh)}else this.model.set("pointChecker",!1)},getSphereGroup:function(){return this.sphereSphereGroup},getSelectedSphereGroup:function(){return this.selectedSphereGroup},getLines:function(){return[]},destroy:function(){this.scene=null,this.frontScene=null,this.camera=null,this.mouseVector=null,this.projector=null,this.ray=null,this.controls=null,this.parent=null,this.crossSection=null,this.outlineMesh=null,this.name=null,this.sphere=null,this.sphereSphereGroup=null,this.sphereCircleGroup=null,this.sphereVerticalCircleGroup=null,this.sphereHorizontalCircleGroup=null,this.eventManager=null}},{CIRCLE_POSITION:[16.67,33.33,50,66.67,83.33]})}}(),function(){"use strict";if(!MathInteractives.Common.Interactivities.ShapeSlicer.Views.Cylinder){var a=MathInteractives.Common.Interactivities.ShapeSlicer.Models.ShapeSlicer.EVENT_MANAGER_MODEL,b=null;MathInteractives.Common.Interactivities.ShapeSlicer.Views.Cylinder=MathInteractives.Common.Player.Views.Base.extend({scene:null,frontScene:null,camera:null,mouseVector:null,projector:null,ray:null,controls:null,parent:null,crossSection:null,outlineMesh:null,name:null,cylinder:null,cylinderSphereGroup:null,cylinderEllipseGroup:null,selectedSphereGroup:null,ellipseLines:null,eventManager:null,initialize:function(a){this.parent=a.parent,this.name=a.name,this.eventManager=a.eventManager,b=MathInteractives.Common.Interactivities.ShapeSlicer.Views.Cylinder,this.parent.initializeThreeJS(this),this.render(),this.attachEventListeners()},render:function(){this._createCylinder()},attachEventListeners:function(){var b=this;this.model.on("change:pointsArr",$.proxy(b._createCrossSectionForCylinder,b)),this.eventManager.on(a.CREATE_CROSSSECTION,$.proxy(b._createCrossSectionForCylinder),b)},_createCylinder:function(){this.cylinder=this._generateCylinder(),this.scene.add(this.cylinder),this._addEllipseToCylinder(),this._addDummyCylinderLines()},_generateCylinder:function(){var a,b,c=this.model.get("radius"),d=this.model.get("height"),e=this.parent.getMaterialDetails(),f=this.model.get("segments");return a=new THREE.MeshBasicMaterial({color:e.COLOR,wireframe:!1,transparent:!0,opacity:e.OPACITY,depthWrite:!1}),b=new THREE.Mesh(new THREE.CylinderGeometry(c,c,d,f,f,!1),a)},_addEllipseToCylinder:function(){var a,c=b.ELLIPSE_POSITION,d=c.length,e=this.cylinder,f=e.position,g=this.model.get("radius"),h=[],i=this.model.get("height"),j=!1;this.cylinderSphereGroup=new THREE.Object3D,this.cylinderEllipseGroup=new THREE.Object3D,this.selectedSphereGroup=new THREE.Object3D;for(var k=0;d>k;k++)a=(50-c[k])*i/100,h[k]=this.parent.drawCurve(g,g),h[k].rotation.x=this.parent.angleToRadians(90),h[k].position.set(f.x,f.y+a,f.z),this.cylinderEllipseGroup.add(h[k]),k===d-1&&(j=!0),this._addSpheresToCylinder(h[k],j,c[k]);this.scene.add(this.cylinderEllipseGroup),this.scene.add(this.cylinderSphereGroup),this.frontScene.add(this.selectedSphereGroup)},_addSpheresToCylinder:function(a,b,c){for(var d,e,f,g=[],h=a.geometry.boundingSphere.radius,i=this.model.get("height"),j=this.model.get("numberOfClickableSpheres"),k=Math.sqrt(3)/2,l=a.position,m=[{x:l.x-h/2,y:l.y,z:l.z-k*h},{x:l.x+h/2,y:l.y,z:l.z-k*h},{x:l.x+h,y:l.y,z:l.z},{x:l.x+h/2,y:l.y,z:l.z+k*h},{x:l.x-h/2,y:l.y,z:l.z+k*h},{x:l.x-h,y:l.y,z:l.z}],n=0;j>n;n++)g[n]=this.parent.generateClickableSphere(),g[n].position.set(m[n].x,m[n].y,m[n].z),g[n].name="sphere-"+n+"-position-"+c,this.cylinderSphereGroup.add(g[n]),b===!0&&(e={x:m[n].x,y:m[n].y+i,z:m[n].z},d={x:m[n].x,y:m[n].y,z:m[n].z},f=this.parent.drawLines(e,d),this.scene.add(f))},_addDummyCylinderLines:function(){var a,b,c,d,e,f,g,h,i=this.model.get("numberOfDummyLines"),j=(this.model.get("height"),this.cylinder.position,i/2),k=this.cylinderEllipseGroup.children,l=k.length,m=k[l-1],n=m.position,o=k[0],p=o.position,q=this.model.get("radius"),r=p.y,s=p.z,t=n.y,u=n.z,v=360/i;this.ellipseLines=[];for(var w=0;j>=w;w+=10)h=this.parent.angleToRadians(w*v),f=Math.cos(h)*q,g=Math.sin(h)*q,d={x:f,y:r,z:s-g},c={x:f,y:t,z:u-g},e=new THREE.Vector3(d.x,d.y,d.z),b=new THREE.Vector3(c.x,c.y,c.z),a=new THREE.Line3(e,b),this.ellipseLines.push(a);for(var w=0;j>w;w+=10)h=this.parent.angleToRadians((j-w)*v),f=Math.cos(h)*q,g=Math.sin(h)*q,d={x:f,y:r,z:s+g},c={x:f,y:t,z:u+g},e=new THREE.Vector3(d.x,d.y,d.z),b=new THREE.Vector3(c.x,c.y,c.z),a=new THREE.Line3(e,b),this.ellipseLines.push(a)},_createCrossSectionForCylinder:function(){var b,c,d,e=this.model.get("pointsArr"),f=this.parent.model.get("maxPoints"),g=this.parent.getCrosssectionDetails(),h=new THREE.MeshBasicMaterial({color:g.COLOR,side:THREE.DoubleSide,transparent:!0,depthWrite:!1,opacity:g.OPACITY}),i=new THREE.LineBasicMaterial({color:g.COLOR}),j=null,k=this.cylinderSphereGroup,l=e.length;if(this.crossSection&&(this.scene.remove(this.crossSection),this.crossSection=null,this.frontScene.remove(this.outlineMesh),this.outlineMesh=null),l===f){b=k.getObjectByName(e[0]),c=k.getObjectByName(e[1]),d=k.getObjectByName(e[2]);var m=null,n=this._checkNonCollinearPoints(e);if(n.result===!0){j=new THREE.Geometry,m=new THREE.Plane,m.setFromCoplanarPoints(b.position,c.position,d.position),this.parent.filterPoints(this.ellipseLines,m,j);for(var o=j.vertices.length,p=0;o-2>p;p++)j.faces.push(new THREE.Face3(p+1,p+2,0));this.model.set("pointChecker",!0)}else{var q,r=n.points;0!==r.length?(j=new THREE.Geometry,b=k.getObjectByName("sphere-"+r[0]+"-position-0"),c=k.getObjectByName("sphere-"+r[0]+"-position-100"),d=k.getObjectByName("sphere-"+r[1]+"-position-100"),q=k.getObjectByName("sphere-"+r[1]+"-position-0"),j.vertices.push(b.position),j.vertices.push(c.position),j.vertices.push(d.position),j.vertices.push(q.position),j.vertices.push(b.position),j.faces.push(new THREE.Face3(0,1,2)),j.faces.push(new THREE.Face3(0,2,3)),this.model.set("pointChecker",!0)):(0===n.errorType?this.eventManager.trigger(a.POINTS_ON_SAME_EDGE):1===n.errorType&&this.eventManager.trigger(a.POINTS_ON_SAME_FACE),this.model.set("pointChecker",!1))}j&&(this.crossSection=new THREE.Mesh(j,h),this.outlineMesh=new THREE.Line(j,i),this.scene.add(this.crossSection),this.frontScene.add(this.outlineMesh))}else this.model.set("pointChecker",!1)},_checkNonCollinearPoints:function(a){var b,c,d,e,f,g,h,i=/\d+/g,j=(a.length,{result:!1,points:[],errorType:0}),k=[],l=[];if(b=a[0].match(i),k.push(b[0]),l.push(b[1]),b=a[1].match(i),k.push(b[0]),l.push(b[1]),b=a[2].match(i),k.push(b[0]),l.push(b[1]),g=l.indexOf("0"),h=l.indexOf("100"),c=_.uniq(k),d=c.length,1===d)return j;if(2===d)j.points=[c[0],c[1]];else{if((-1!==h||-1!==g)&&(e=_.uniq(l),f=e.length,1===f))return j.errorType=1,j;j.result=!0}return j},getSphereGroup:function(){return this.cylinderSphereGroup},getSelectedSphereGroup:function(){return this.selectedSphereGroup},getLines:function(){return this.ellipseLines},destroy:function(){this.scene=null,this.frontScene=null,this.camera=null,this.mouseVector=null,this.projector=null,this.ray=null,this.controls=null,this.parent=null,this.crossSection=null,this.outlineMesh=null,this.name=null,this.cylinder=null,this.cylinderSphereGroup=null,this.cylinderEllipseGroup=null,this.ellipseLines=null,this.eventManager=null}},{ELLIPSE_POSITION:[0,33,66,100]})}}(),function(){"use strict";if(!MathInteractives.Common.Interactivities.ShapeSlicer.Views.Prism){var a=MathInteractives.Common.Interactivities.ShapeSlicer.Models.ShapeSlicer.EVENT_MANAGER_MODEL,b=null;MathInteractives.Common.Interactivities.ShapeSlicer.Views.Prism=MathInteractives.Common.Player.Views.Base.extend({scene:null,frontScene:null,camera:null,mouseVector:null,projector:null,ray:null,controls:null,parent:null,crossSection:null,outlineMesh:null,name:null,prism:null,prismSphereGroup:null,prismHexagonGroup:null,selectedSphereGroup:null,hexagonLines:null,eventManager:null,initialize:function(a){this.parent=a.parent,this.name=a.name,this.eventManager=a.eventManager,b=MathInteractives.Common.Interactivities.ShapeSlicer.Views.Prism,this.parent.initializeThreeJS(this),this.render(),this.attachEventListeners()},render:function(){this._createPrism()},attachEventListeners:function(){var b=this;this.model.on("change:pointsArr",$.proxy(b._createCrossSectionForPrism,b)),this.eventManager.on(a.CREATE_CROSSSECTION,$.proxy(b._createCrossSectionForPrism),b)},_createPrism:function(){this.prism=this._generatePrism(),this.scene.add(this.prism),this._addHexagonToPrism(),this._addDummyPrismLines()},_generatePrism:function(){var a,b,c=this.model.get("radius"),d=this.model.get("height"),e=this.parent.getMaterialDetails(),f=this.model.get("radiusSegments"),g=this.model.get("heightSegments");return a=new THREE.MeshBasicMaterial({color:e.COLOR,wireframe:!1,transparent:!0,opacity:e.OPACITY,depthWrite:!1}),b=new THREE.Mesh(new THREE.CylinderGeometry(c,c,d,f,g,!1),a)},_addHexagonToPrism:function(){var a,c=b.HEXAGON_POSITION,d=c.length,e=this.prism,f=e.position,g=this.model.get("radius"),h=[],i=this.model.get("height"),j=!1;this.prismSphereGroup=new THREE.Object3D,this.prismHexagonGroup=new THREE.Object3D,this.selectedSphereGroup=new THREE.Object3D;for(var k=0;d>k;k++)a=(50-c[k])*i/100,h[k]=this.parent.drawPolygon(this.model.get("numberOfPolygonSides"),g),h[k].rotation.x=this.parent.angleToRadians(90),h[k].position.set(f.x,f.y+a,f.z),this.prismHexagonGroup.add(h[k]),k===d-1&&(j=!0),this._addSpheresToPrism(h[k],j,c[k]);this.scene.add(this.prismHexagonGroup),this.scene.add(this.prismSphereGroup),this.frontScene.add(this.selectedSphereGroup)},_addSpheresToPrism:function(a,b,c){for(var d,e,f,g=[],h=this.model.get("radius"),i=this.model.get("height"),j=this.model.get("numberOfClickableSpheres"),k=this.parent.angleToRadians(360/j),l=Math.sin(k),m=Math.cos(k),n=a.position,o=[{x:n.x,y:n.y,z:n.z-h},{x:n.x+l*h,y:n.y,z:n.z-m*h},{x:n.x+l*h,y:n.y,z:n.z+m*h},{x:n.x,y:n.y,z:n.z+h},{x:n.x-l*h,y:n.y,z:n.z+m*h},{x:n.x-l*h,y:n.y,z:n.z-m*h}],p=0;j>p;p++)g[p]=this.parent.generateClickableSphere(),g[p].position.set(o[p].x,o[p].y,o[p].z),g[p].id="sphere-"+p+"-position-"+c,g[p].name="sphere-"+p+"-position-"+c+"-face-"+p+"-face-"+(p-1+j)%j,this.prismSphereGroup.add(g[p]),b===!0&&(e={x:o[p].x,y:o[p].y+i,z:o[p].z},d={x:o[p].x,y:o[p].y,z:o[p].z},f=this.parent.drawLines(e,d),this.scene.add(f))},_addDummyPrismLines:function(){for(var a,b,c,d,e,f,g,h,i=this.model.get("numberOfDummyLines"),j=this.prismHexagonGroup.children,k=j.length,l=j[k-1],m=l.position,n=j[0],o=n.position,p=(o.y,o.z,m.y,m.z,new THREE.Vector3),q=new THREE.Vector3,r=this.prismSphereGroup,s=r.children,t=(s.length,this.model.get("offsetForCrossSectionY"),[]),u=this.model.get("height"),v=0;6>v;v++)t.push(r.getObjectById("sphere-"+v+"-position-0"));f=t.length,this.hexagonLines=[];for(var v=0;f>v;v++){g=t[v].position,h=t[(v+1)%f].position,p=p.subVectors(g,h),p.divideScalar(i),q=g.clone();for(var w=0;i>w;w++)0!==w&&(q=q.subVectors(q,p)),d={x:q.x,y:q.y,z:q.z},c={x:q.x,y:q.y-u,z:q.z},e=new THREE.Vector3(d.x,d.y,d.z),b=new THREE.Vector3(c.x,c.y,c.z),a=new THREE.Line3(e,b),this.hexagonLines.push(a)}},_createCrossSectionForPrism:function(){var c,d,e,f=this.model.get("pointsArr"),g=this.parent.model.get("maxPoints"),h=this.parent.getCrosssectionDetails(),i=new THREE.MeshBasicMaterial({color:h.COLOR,side:THREE.DoubleSide,transparent:!0,depthWrite:!1,opacity:h.OPACITY}),j=new THREE.LineBasicMaterial({color:h.COLOR}),k=null,l=this.prismSphereGroup,m=f.length;if(this.crossSection&&(this.scene.remove(this.crossSection),this.crossSection=null,this.frontScene.remove(this.outlineMesh),this.outlineMesh=null),m===g){c=l.getObjectByName(f[0]),d=l.getObjectByName(f[1]),e=l.getObjectByName(f[2]);var n=null,o=this._checkNonCollinearPoints(f);if(o.result===!0){k=new THREE.Geometry,n=new THREE.Plane,n.setFromCoplanarPoints(c.position,d.position,e.position),i.opacity=b.CROSSSECTION_DETAILS.OPACITY,this.parent.filterPoints(this.hexagonLines,n,k);for(var p=k.vertices.length,q=0;p-2>q;q++)k.faces.push(new THREE.Face3(q+1,q+2,0));this.model.set("pointChecker",!0)}else{var r,s=o.points;0!==s.length?(k=new THREE.Geometry,c=l.getObjectById("sphere-"+s[0]+"-position-0"),d=l.getObjectById("sphere-"+s[0]+"-position-100"),e=l.getObjectById("sphere-"+s[1]+"-position-100"),r=l.getObjectById("sphere-"+s[1]+"-position-0"),k.vertices.push(c.position),k.vertices.push(d.position),k.vertices.push(e.position),k.vertices.push(r.position),k.vertices.push(c.position),k.faces.push(new THREE.Face3(0,1,2)),k.faces.push(new THREE.Face3(0,2,3)),this.model.set("pointChecker",!0)):(0===o.errorType?this.eventManager.trigger(a.POINTS_ON_SAME_EDGE):1===o.errorType&&this.eventManager.trigger(a.POINTS_ON_SAME_FACE),this.model.set("pointChecker",!1))}k&&(this.crossSection=new THREE.Mesh(k,i),this.outlineMesh=new THREE.Line(k,j),this.scene.add(this.crossSection),this.frontScene.add(this.outlineMesh))}else this.model.set("pointChecker",!1)},_checkNonCollinearPoints:function(a){var b,c,d,e,f,g,h,i=/\d+/g,j={result:!1,points:[],errorType:0},k=[],l=[],m=[];if(b=a[0].match(i),k.push(b[0]),m.push(b[1]),l.push(b[2]),l.push(b[3]),b=a[1].match(i),k.push(b[0]),m.push(b[1]),l.push(b[2]),l.push(b[3]),b=a[2].match(i),k.push(b[0]),m.push(b[1]),l.push(b[2]),l.push(b[3]),g=m.indexOf("0"),h=m.indexOf("100"),c=_.uniq(k),d=c.length,1===d)return j;if(2===d){var n=_.uniq(l),o=n.length;if(3===o)return j.errorType=1,j;j.points=[c[0],c[1]]}else{if((-1!==h||-1!==g)&&(e=_.uniq(m),f=e.length,1===f))return j.errorType=1,j;j.result=!0}return j},getSphereGroup:function(){return this.prismSphereGroup},getSelectedSphereGroup:function(){return this.selectedSphereGroup},getLines:function(){return this.hexagonLines},destroy:function(){this.scene=null,this.frontScene=null,this.camera=null,this.mouseVector=null,this.projector=null,this.ray=null,this.controls=null,this.parent=null,this.crossSection=null,this.outlineMesh=null,this.name=null,this.prism=null,this.prismSphereGroup=null,this.prismHexagonGroup=null,this.hexagonLines=null,this.eventManager=null}},{HEXAGON_POSITION:[0,33,66,100],CROSSSECTION_DETAILS:{OPACITY:.5}})}}(),function(){"use strict";if(!MathInteractives.Common.Interactivities.ShapeSlicer.Views.Tetrahedron){var a=MathInteractives.Common.Interactivities.ShapeSlicer.Models.ShapeSlicer.EVENT_MANAGER_MODEL,b=null;MathInteractives.Common.Interactivities.ShapeSlicer.Views.Tetrahedron=MathInteractives.Common.Player.Views.Base.extend({scene:null,frontScene:null,camera:null,mouseVector:null,projector:null,ray:null,controls:null,parent:null,crossSection:null,outlineMesh:null,name:null,tetrahedron:null,tetrahedronSphereGroup:null,selectedSphereGroup:null,tetrahedronLines:null,eventManager:null,initialize:function(a){this.parent=a.parent,this.name=a.name,this.eventManager=a.eventManager,b=MathInteractives.Common.Interactivities.ShapeSlicer.Views.Tetrahedron,this.parent.initializeThreeJS(this),this.render(),this.attachEventListeners()},render:function(){this._createTetrahedron()},attachEventListeners:function(){var b=this;this.model.on("change:pointsArr",$.proxy(b._createCrossSectionForTetrahedron,b)),this.eventManager.on(a.CREATE_CROSSSECTION,$.proxy(b._createCrossSectionForTetrahedron),b)},_createTetrahedron:function(){this.tetrahedron=this._generateTetrahedron(),this.scene.add(this.tetrahedron),
this._addLineToTetrahedron(),this._addDummyTetrahedronLines()},_generateTetrahedron:function(){var a,b,c,d=this.model.get("sideLength"),e=this.parent.getMaterialDetails();return a=new THREE.MeshBasicMaterial({color:e.COLOR,wireframe:!1,transparent:!0,opacity:e.OPACITY,depthWrite:!1}),c=new THREE.TetrahedronGeometry(d),b=new THREE.Mesh(c,a)},_addLineToTetrahedron:function(){var a,c,d,e,f,g,h,i,j=this.model.get("numberOfClickableSpheres"),k=this.tetrahedron,l=k.geometry,m=l.vertices,n=m.length,o=new THREE.Vector3,p=new THREE.Vector3;this.tetrahedronSphereGroup=new THREE.Object3D,this.tetrahedronLinesGroup=new THREE.Object3D,this.selectedSphereGroup=new THREE.Object3D;for(var q=0;n>q;q++)a=this.parent.generateClickableSphere(),d=m[q],a.position.set(d.x,d.y,d.z),a.name="sphere-0-position-"+q,this.tetrahedronSphereGroup.add(a);for(var q=0;n-1>q;q++){c=m[q];for(var r=q+1;n>r;r++)d=m[r],this.tetrahedronLinesGroup.add(this.parent.drawLines(c,d))}e=this.tetrahedronLinesGroup.children,f=e.length;for(var q=0;f>q;q++){g=e[q].geometry.vertices,h=g[0],i=g[1],o=o.subVectors(h,i),o.divideScalar(j),p=h.clone();for(var r=1;j>r;r++)p=p.subVectors(p,o),c={x:p.x,y:p.y,z:p.z},a=this.parent.generateClickableSphere(),a.position.set(c.x,c.y,c.z),a.name="sphere-"+r+"-position-"+q,this.tetrahedronSphereGroup.add(a)}this.tetrahedronSphereGroup.children=this.parent.reOrderSpheres(this.tetrahedronSphereGroup,b.ORDERED_SPHERES),this.scene.add(this.tetrahedronSphereGroup),this.scene.add(this.tetrahedronLinesGroup),this.frontScene.add(this.selectedSphereGroup)},_addDummyTetrahedronLines:function(){for(var a,b,c,d,e,f,g,h=this.model.get("numberOfDummyLines"),i=this.tetrahedronSphereGroup,j=i.getObjectByName("sphere-0-position-0"),k=j.position,l=[],m={x:k.x,y:k.y,z:k.z},n=new THREE.Vector3,o=new THREE.Vector3,p=1;4>p;p++)l.push(i.getObjectByName("sphere-0-position-"+p));d=l.length,this.tetrahedronLines=[];for(var p=0;d>p;p++){f=l[p].position,g=l[(p+1)%d].position,n=n.subVectors(f,g),n.divideScalar(h),o=f.clone();for(var q=0;h>q;q++)0!==q&&(o=o.subVectors(o,n)),e={x:o.x,y:o.y,z:o.z},b=new THREE.Vector3(m.x,m.y,m.z),c=new THREE.Vector3(e.x,e.y,e.z),a=new THREE.Line3(b,c),this.tetrahedronLines.push(a)}},_createCrossSectionForTetrahedron:function(){var b,c,d,e=this.model.get("pointsArr"),f=this.parent.model.get("maxPoints"),g=this.parent.getCrosssectionDetails(),h=new THREE.MeshBasicMaterial({color:g.COLOR,side:THREE.DoubleSide,transparent:!0,depthWrite:!1,opacity:g.OPACITY}),i=new THREE.LineBasicMaterial({color:g.COLOR}),j=null,k=this.tetrahedronSphereGroup,l=e.length;if(this.crossSection&&(this.scene.remove(this.crossSection),this.crossSection=null,this.frontScene.remove(this.outlineMesh),this.outlineMesh=null),l===f){b=k.getObjectByName(e[0]),c=k.getObjectByName(e[1]),d=k.getObjectByName(e[2]);var m=null,n=this._checkNonCollinearPoints(e);if(n.result===!0){j=new THREE.Geometry,m=new THREE.Plane,m.setFromCoplanarPoints(b.position,c.position,d.position),this.parent.filterPoints(this.tetrahedronLines,m,j);for(var o=j.vertices.length,p=0;o-2>p;p++)j.faces.push(new THREE.Face3(p+1,p+2,0));this.model.set("pointChecker",!0)}else{var q=n.points;0!==q.length?(j=new THREE.Geometry,b=k.getObjectByName("sphere-"+q[0]+"-position-"+q[1]),c=k.getObjectByName("sphere-"+q[2]+"-position-"+q[3]),d=k.getObjectByName("sphere-"+q[4]+"-position-"+q[5]),j.vertices.push(b.position),j.vertices.push(c.position),j.vertices.push(d.position),j.vertices.push(b.position),j.faces.push(new THREE.Face3(3,1,2)),this.model.set("pointChecker",!0)):(0===n.errorType?this.eventManager.trigger(a.POINTS_ON_SAME_EDGE):1===n.errorType&&this.eventManager.trigger(a.POINTS_ON_SAME_FACE),this.model.set("pointChecker",!1))}j&&(this.crossSection=new THREE.Mesh(j,h),this.outlineMesh=new THREE.Line(j,i),this.scene.add(this.crossSection),this.frontScene.add(this.outlineMesh))}else this.model.set("pointChecker",!1)},_checkNonCollinearPoints:function(a){var b,c,d,e,f=/\d+/g,g={result:!1,points:[],errorType:0},h=[],i=[];switch(b=a[0].match(f),h.push(b[0]),i.push(b[1]),b=a[1].match(f),h.push(b[0]),i.push(b[1]),b=a[2].match(f),h.push(b[0]),i.push(b[1]),d=this.parent.sortPoints(_.uniq(i)),e=d.length,c=this.parent.countInstances("0",h)){case 0:return 1===e?g:this._isSameFace(c,d,h,i)?(g.errorType=1,g):this._isTriangle(c,d,h,i,g)?g:(g.result=!0,g);case 1:case 2:return this._isSameLine(c,h,i)?g:this._isSameFace(c,d,h,i)?(g.errorType=1,g):(this._isTriangle(c,d,h,i,g),g);case 3:return g.errorType=1,g}},_isTriangle:function(a,c,d,e,f){var g,h,i,j,k,l,m,n,o,p=[],q=b.TETRAHEDRON_DATA,r=q.LINES_ADJOINING_CORNERS,s=q.CORNER_NEIGHBOR.slice();switch(a){case 0:return 2===c.length?(m=this.parent.countInstances(c[0],e)>1?0:1,o=(m+1)%2,l=c[o],i=d[e.indexOf(l)],p.push("0",s[c[m]][0],"0",s[c[m]][1],i,l),f.points=p,!0):!1;case 1:return g=d.indexOf("0"),j=e[g],m=_.difference([0,1,2],[g]),n=r[j],k=e[m[0]],h=d[m[0]],l=e[m[1]],i=d[m[1]],n.indexOf(k)>-1?(p.push(d[g],j),p.push(i,l),p.push("0",this._findCorner(j,k))):n.indexOf(l)>-1?(p.push(d[g],j),p.push(h,k),p.push("0",this._findCorner(j,l))):p.push(d[0],e[0],d[1],e[1],d[2],e[2]),f.points=p,!0;case 2:return p.push(d[0],e[0],d[1],e[1],d[2],e[2]),f.points=p,!0}},_findCorner:function(a,c){var d=b.TETRAHEDRON_DATA,e=this.parent.returnDeepCopy(d.CORNER_NEIGHBOR),f=e[parseInt(c)];return f.splice(f.indexOf(parseInt(a)),1),f[0]},_isSameLine:function(a,c,d){var e,f,g,h=b.TETRAHEDRON_DATA,i=h.LINES_ADJOINING_CORNERS;switch(a){case 1:return e=c.indexOf("0"),f=_.difference([0,1,2],[e]),d[f[0]]===d[f[1]]&&i[d[e]].indexOf(d[f[0]])>-1;case 2:return e=c.indexOf("0"),f=c.lastIndexOf("0"),g=_.difference([0,1,2],[e,f])[0],_.intersection(i[d[e]],i[d[f]])[0]===d[g]}},_isSameFace:function(a,c,d,e){var f,g,h,i,j,k,l,m,n,o=b.TETRAHEDRON_DATA,p=o.FACES,q=p.length,r=["0","1","2","3","4","5"],s=o.LINES_ADJOINING_CORNERS;switch(a){case 0:for(var t=0;q>t;t++)if(_.isEqual(c,_.intersection(c,p[t])))return!0;return!1;case 1:return f=d.indexOf("0"),h=e[f],g=_.difference([0,1,2],[f]),j=s[h],k=e[g[0]],l=d[g[0]],m=e[g[1]],n=d[g[1]],j.indexOf(k)>-1?(i=this._findCorner(h,k),!(_.difference(r,_.union(s[i],s[e[f]]))[0]===e[g[1]])):j.indexOf(m)>-1?(i=this._findCorner(h,m),!(_.difference(r,_.union(s[i],s[e[f]]))[0]===e[g[0]])):k===m;case 2:return f=d.indexOf("0"),g=d.lastIndexOf("0"),i=_.difference([0,1,2],[f,g]),!(_.difference(r,_.union(s[e[f]],s[e[g]]))[0]===e[i])}},getSphereGroup:function(){return this.tetrahedronSphereGroup},getSelectedSphereGroup:function(){return this.selectedSphereGroup},getLines:function(){return this.tetrahedronLines},destroy:function(){this.scene=null,this.frontScene=null,this.camera=null,this.mouseVector=null,this.projector=null,this.ray=null,this.controls=null,this.parent=null,this.crossSection=null,this.outlineMesh=null,this.name=null,this.tetrahedron=null,this.tetrahedronSphereGroup=null,this.tetrahedronLines=null,this.eventManager=null}},{TETRAHEDRON_DATA:{CORNERS:[[0,0],[0,1],[0,2],[0,3]],LINES_ADJOINING_CORNERS:[["0","1","2"],["0","3","4"],["1","3","5"],["2","4","5"]],FACES:[["0","2","4"],["3","4","5"],["1","2","5"],["0","1","3"]],CORNER_NEIGHBOR:[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]]},ORDERED_SPHERES:[[0,1],[3,0],[1,4],[1,3],[2,0],[2,4],[2,3],[1,0],[3,4],[3,3],[0,0],[1,2],[2,2],[3,2],[0,3],[3,5],[2,5],[1,5],[0,2],[3,1],[2,1],[1,1]]})}}();